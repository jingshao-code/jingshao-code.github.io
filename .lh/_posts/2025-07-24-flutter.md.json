{
    "sourceFile": "_posts/2025-07-24-flutter.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753275398453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753275398453,
            "name": "Commit-0",
            "content": "Your First Step to Contributing: A Guide to Building the Flutter¬†Engine\n\nThis guide walks you through setting up and building the Flutter Engine from source, targeting iOS devices, simulators, and the macOS host environment. It also shows how to integrate the custom engine with a test Flutter app using the Flutter tool or Xcode.\n\n```markdown\nüíª Tested on\n\nThis guide was tested on the following device:\n\n- Device: MacBook Air 15\" (M2, 2023)\n- Chip: Apple M2 (ARM64)\n- Memory: 8GB\n- macOS: Sequoia 15.5\n\n‚ö†Ô∏è Make sure your macOS version is up-to-date and compatible with the latest Xcode version.  \n```\n\n**If you are located in mainland China, please read the Appendix before proceeding!!!**\n\nPhase 1: Environment Setup and Prerequisites\n\n### step1: **Required System Dependencies**  (from `Setting-up-the-Engine-development-environment.md`)\n\nOn macOS: install latest Xcode\n\nMake sure your system includes the following tools:\n\n```bash\nbrew install git python3 ninja\n```\n\n### step2: Clone flutter engine repo & depot_tools (from `engine/README.md`)\n\nNext, clone both the main Flutter repository and Google's `depot_tools`. We are grouping all download steps together for efficiency.\n\n**Note:** In this guide, all repositories are cloned into the home directory (`~`). All subsequent paths in this guide assume this location as their base. Please replace it with your own path.\n\n```bash\n# Clone the main Flutter repository (contains SDK and engine source)\ngit clone https://github.com/flutter/flutter \n\n# Clone depot_tools, which contains the gclient script\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git \n```\n\nstep3: PATH Setup\n\nHere is a quick explanation of each path's role:\n\n**depot_tools:** This path adds the `gclient` command, which is essential for syncing the engine's dependencies. Flutter¬†Engine relies on **depot_tools** to fetch Dart¬†SDK and third‚Äëparty code via¬†`gclient`.\n\n**Flutter SDK (`flutter/bin`):** **For Application Development.** This path is for the standard `flutter` command you use every day. Its purpose is to build, run, and manage your **applications**.\n\n**Flutter Engine Tools (`engine/src/flutter/bin`):** **For Engine Development.** This path points to the **special toolkit** for building the **engine itself**. It provides a crucial, low-level command called `et` (Engine Tool) that the engine's own compilation scripts depend on to function. Simply put, without this path being set correctly, our compilation **will fail** later on.\n\nOpen shell profile file (`~/.zshrc`) in your editor and add the following lines. Adjust each `<PATH>` to match where you actually cloned or installed each tool.\n\n```bash\n# Open ~/.zshrc, add depot_tools to your PATH\nexport PATH=\"$HOME/depot_tools:$PATH\"\n\n# Flutter CLI (SDK)\nexport PATH=\"$HOME/flutter/bin:$PATH\"\n\n# Engine tool (et)\nexport PATH=\"$HOME/flutter/engine/src/flutter/bin:$PATH\"\n\n# Apply the PATH changes immediately\nsource ~/.zshrc\n\n# Verify that gclient from depot_tools is in your PATH\nwhich gclient\n\n# Verify that the Flutter SDK is in your PATH\nwhich flutter\n\n# Verify that the engine tool (et) is in your PATH\nwhich et\n```\n\n**Troubleshooting:** If you see a `command not found` error, it means your `PATH` is incorrect. Double-check the `export` lines in your `~/.zshrc` file for typos.\n\nPhase 2: Syncing Engine Dependencies\n\n### step4: gClient Dependency Bootstrap\n\nFlutter engine uses `gclient` to manage dependencies.\n\nSet up the `.gclient`¬† file in the repository root (the¬†repository root: `~/flutter` ), copy the standard gclient configuration file, and then run¬†`gclient sync`\n\n```bash\n# IMPORTANT: Navigate to the root of the flutter repository\ncd ~/flutter\n\n# Copy the standard gclient configuration file to the root\ncp engine/scripts/standard.gclient .gclient\n```\n\nRun the following to sync dependencies:\n\n```bash\ngclient sync\n```\n\nJust a fair warning, the first time you run this, it takes forever (think 30-60+ mins) because it's downloading the whole world. So kick it off, go do something else, and come back later. After this initial one, it gets much faster.\n\nPhase 3: Compiling the Engine\n\n### step5: Compiling Flutter Engine (from `Compiling-the-engine.md`)\n\nChoose Your Platform: [Compiling for iOS (from macOS)](https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md#compiling-for-ios-from-macos)\n\nBuild for iOS Device, iOS Simulator, and macOS Host\n\n```bash\ncd ~/flutter/engine/src\n\n# Build iOS device-side executable\n./flutter/tools/gn --ios --unoptimized\n# Run build for iOS device version\nninja -C out/ios_debug_unopt\n\n# For iOS simulator (on arm64 Mac), add --simulator and --simulator-cpu=arm64\n./flutter/tools/gn --ios --simulator --unoptimized --simulator-cpu=arm64\n# Run build for iOS simulator version \nninja -C out/ios_debug_sim_unopt_arm64\n\n#Build host-side tools with arm64 architecture to avoid Rosetta emulation\n./flutter/tools/gn --unoptimized --mac-cpu arm64\n# Run build for host-side tools version\nninja -C out/host_debug_unopt_arm64\n\n```\n\n### step6: Verify Engine Build Success\n\nAfter building, you can verify if the outputs are generated by listing the folders:\n\n```bash\nls out/\n```\n\nYou should see the following folders:\n\n- `ios_debug_unopt`\n- `ios_debug_sim_unopt_arm64`\n- `host_debug_unopt_arm64`\n\nPhase 4: Integration and Verification\n\n### step7: Prepare a Test Flutter App\n\n```bash\nmkdir ~/flutter-engine-tests\ncd ~/flutter-engine-tests\nflutter create myapp\ncd myapp\n```\n\nThen you can use this app project to configure and run with your custom-built engine.\n\n### step8: Configure and Run iOS Project via Xcode\n\nTo use your locally-built engine with the Flutter tool, pass the following two parameters:\n\n`--local-engine-src-path`:Specifies the path to your engine repository.\n\n`--local-engine`: Specifies which engine build to use (e.g., ios_debug_unopt, `host_debug_unopt`_arm64).\n\nTypical invocation:\n\n```bash\n#Sets up the iOS project but does not build the app, and test on the real iphone\nflutter build ios \\\n  --local-engine-src-path ~/flutter/engine/src \\\n  --local-engine-host=host_debug_unopt_arm64 \\\n  --local-engine=ios_debug_unopt \\\n  --config-only\n  \n# Explanation:\n# --local-engine-src-path: Specifies the path to your engine repository's 'src' directory.\n# --local-engine-host: Specifies the locally-built engine used by the Flutter tool itself (running on your macOS host).\n# --local-engine: Specifies the locally-built engine that will be bundled with your app for the target device/simulator.\n\n#Opens the project in Xcode for manual run/debug  \n open ios/Runner.xcworkspace\n\n#Because --config-only only generates the Xcode project setup, \n#and open ios/Runner.xcworkspace lets you build and run manually in Xcode, \n#which is useful for debugging or stepping through engine code.\n\n```\n\nPhase 5: Debugging the Engine\n\n### step9: Debug with Breakpoints\n\n1. Open ios/Runner.xcworkspace in Xcode.\n2. Set breakpoints in engine source code (e.g., FlutterTextInputPlugin.mm).\n3. In Xcode, go to Debug > Attach to Process, then choose your app.\n4. Run your Flutter app via `flutter run` or manually from Xcode.\n\nThis lets you step into engine code and inspect runtime behavior. \n\nüõ†Ô∏è Note: Source Code Shows Assembly?\n\nSometimes, when a breakpoint is hit, **Xcode may show assembly code** instead of the actual Flutter engine source file. This usually happens when Xcode cannot locate the correct source path.\n\nTo fix this:\n\n- Make sure the **source path mapping** is active in your `~/.lldbinit` file.\n- The actual path of your Flutter Engine source should **exactly match** the mapping.\n\nYou can add the following line to your `~/.lldbinit` file (update the path as needed):\n\n```bash\nsettings set target.source-map \"flutter/\" \"/path/to/engine/src/flutter/\"\n```\n\nüí° Still seeing assembly even after setting the source-map?\n\nDon't worry ‚Äî you're not alone. This issue can sometimes persist even with correct setup. If that happens, don't get frustrated!\n\nYou can try **manual LLDB debugging** as a workaround:\n\n- Add a `NSLog()` or print statement in your Flutter engine source file to confirm your **custom local engine is actually running**.\n- Use `lldb` in the terminal or via Xcode's debugger console to step through functions manually, even without full source mapping.\n\nThis way, you can still check if your local engine build is working, and see if your changes in the engine code are taking effect.\n\nAppendix:\n\n1. Network Proxy for Mainland China\n\nIf you are located in **mainland China**, you may encounter network issues when running `gclient sync` or accessing Google-hosted dependencies.\n\nTo avoid errors like `Connection timed out` or `Failed to fetch`, it is recommended to **temporarily set a proxy** in your terminal session before executing the installation steps.\n\n```bash\n# Set HTTP/HTTPS proxy for the current terminal session\nexport http_proxy=http://127.0.0.1:7890\nexport https_proxy=http://127.0.0.1:7890\nexport all_proxy=socks5://127.0.0.1:7890\n\n```\n\nReplace `127.0.0.1:7890` with your local proxy address (from Clash, Shadowsocks, V2Ray, etc.) You can also write this in your shell config (`~/.zshrc`) if you need it persistently.\n\n1. (Optional) Flutter China Mirror Settings\n\nFor faster downloads of Dart/Flutter packages and SDK binaries in mainland China, you can point Flutter to a trusted mirror:\n\n```bash\n# Dart / Flutter package mirror\nexport PUB_HOSTED_URL=\"https://pub.flutter-io.cn\"\n\n# Flutter SDK & engine binary mirror\nexport FLUTTER_STORAGE_BASE_URL=\"https://storage.flutter-io.cn\"\n```\n\nAdd these to your shell profile (e.g. `~/.zshrc`) **before** step8. If you later experience missing-package errors, simply unset `PUB_HOSTED_URL` or comment it out and rerun your command\n\n# **Resources**\n\n1. flutter repo\n    \n    https://github.com/flutter/flutter\n    \n2. GET DEPOT TOOLS\n    \n    https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up\n    \n3. `gclient`¬†bootstrap\n    \n    https://github.com/flutter/flutter/tree/master/engine#setting-up-the-engine-development-environment\n    \n4. Setting-up-the-Engine-development-environment.md\n    \n    https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Setting-up-the-Engine-development-environment.md\n    \n5. Compiling-the-engine.md\n    \n    https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/contributing/Compiling-the-engine.md\n    \n6. The¬†`flutter`¬†tool: Using a locally-built engine with the¬†`flutter`¬†tool\n    \n    https://github.com/flutter/flutter/blob/master/docs/tool/README.md\n    \n7. Debugging iOS builds with Xcode\n    \n    https://github.com/flutter/flutter/blob/master/engine/src/flutter/docs/Debugging-the-engine.md#googlers-using-rbe\n    \n8. Flutter China Mirror Settings\n    \n    https://docs.flutter.cn/community/china/"
        }
    ]
}